const express = require('express')

const app = express()

const PromiseSimplified = require('./PromiseSimplified')

//Handling async code using callbacks

// function mission(callback){
//     let missionStatus = "incomplete"
//     setTimeout(() => {
//         missionStatus = 'complete'
//         callback(missionStatus)
//     }, 2000)
//     console.log(`The mission is in progress... Status: ${missionStatus}`)
// }



// function missionUpdate(status){
//     console.log(`The mission is complete! Status: ${status}`)
// }

// mission(missionUpdate)

//Using a simple fetch request -- JS has a built-in function called fetch that accepts an API URL as its argument. Once the API request is complete, you can attach a .then and/or .catch to the fetch to access the response or the error that gets generated by fetch
// fetch('https://pokeapi.co/api/v2/pokemon/')
//     .then(results => {
//         console.log(results)
//     }) .catch(error => {
//         console.log(error)

//     })


//Handling async code using Promises

function missionPromise (){
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            let secretDocs = "Super SECRET!!!!!";
            resolve(secretDocs)
        }, 2000)
    })
}


missionPromise().then((result) => {console.log(result)})







app.listen(4000, () => {
    console.log("Server listening on port 4000")
})

