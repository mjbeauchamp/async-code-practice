const express = require('express')
const axios = require('axios')

const app = express()

const PromiseSimplified = require('./PromiseSimplified')

//Handling async code using callbacks

// function mission(callback){
//     let missionStatus = "incomplete"
//     setTimeout(() => {
//         missionStatus = 'complete'
//         callback(missionStatus)
//     }, 2000)
//     console.log(`The mission is in progress... Status: ${missionStatus}`)
// }



// function missionUpdate(status){
//     console.log(`The mission is complete! Status: ${status}`)
// }

// mission(missionUpdate)

//Using a simple fetch request -- JS has a built-in function called fetch that accepts an API URL as its argument. Once the API request is complete, you can attach a .then and/or .catch to the fetch to access the response or the error that gets generated by fetch
// fetch('https://pokeapi.co/api/v2/pokemon/')
//     .then(results => {
//         console.log(results)
//     }) .catch(error => {
//         console.log(error)

//     })


//Handling async code using Promises

function missionPromise (message){
    return new PromiseSimplified((resolve, reject) => {
        setTimeout(() => {
            if(!message){
                reject("There were no instructions")
            } else {
                let secretDocs = message;
                resolve(secretDocs)
            }
        }, 2000)
    })
}


// missionPromise("Top secret mission instructions!")
//     .then((result) => {
//         console.log(result)
//     })
//     .catch(error => {
//         console.log(error)
//     })

//Fetching Pokemon from the Pokemon API
function getApiData(url){
    let pokemon = new PromiseSimplified((resolve, reject) => {
        axios.get(url)
            .then(result => {
                resolve(result.data)
            })
            .catch(err => {
                reject("There was a problem")
            })
    })

    return pokemon;
}

// getApiData("https://pokeapi.co/api/v2/pokemon/bulbasaur")
//     .then(result => {
//         console.log(result)
//     })
//     .catch(err => {
//         console.log(err)
//     })

//Fetching several individual Pokemon at once and resolving them using Promise.all
let pokemonUrlArray = [
    "https://pokeapi.co/api/v2/pokemon/bulbasaur",
    "https://pokeapi.co/api/v2/pokemon/ivysaur",
    "https://pokeapi.co/api/v2/pokemon/charmander"
]

function getSpecificPokemon(pokemonUrls){
    let promiseArray = []
    pokemonUrls.forEach(val => {
        let promise = new Promise((resolve, reject) => {
           
            axios.get(val)
            .then(response => {
                resolve(response.data.species)
            })
            .catch(err => {
                reject("There was an issue")
            })
        })

        promiseArray.push(promise)
    })
    return promiseArray;
}

let pokemonPromiseArray = getSpecificPokemon(pokemonUrlArray)

Promise.all(pokemonPromiseArray)
    .then(results => {
        console.log(results)
    })
    .catch(err => {
        console.log("Whoopsie!")
    })

//console.log(pokemonPromiseArray)



//Using Promise.all

function ponyGreeting(name, time){
    let greetPromise = new Promise((resolve, reject) => {
        if(name && time){
            let greeting = ''
            setTimeout(() => {
                greeting = `Hi, I'm ${name}!`
                resolve(greeting)
            }, time)
        } else {
            reject("Insufficient information was provided")
        }
    })
    return greetPromise;
}


let promiseArray = [];
promiseArray.push(ponyGreeting("Twilight", 1000).catch(err => {console.log(err)}))
promiseArray.push(ponyGreeting("Pinkie", 500).catch(err => {console.log(err)}))
promiseArray.push(ponyGreeting("Fluttershy", 3000).catch(err => {console.log(err)}))
promiseArray.push(ponyGreeting("Apple Jack", 2000).catch(err => {console.log(err)}))

Promise.all(promiseArray)
    .then(array => {
        console.log(array)
    })







app.listen(4000, () => {
    console.log("Server listening on port 4000")
})

